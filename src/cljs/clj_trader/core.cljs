(ns clj-trader.core
  (:require
    [reagent.core :as reagent :refer [atom]]
    [reagent.dom :as rdom]
    [reagent.session :as session]
    [reitit.frontend :as reitit]
    [clerk.core :as clerk]
    [accountant.core :as accountant]
    [cljs-http.client :as client]))

;; -------------------------
;; Routes

(def router
  (reitit/router
   [["/" :index]
    ["/items"
     ["" :items]
     ["/:item-id" :item]]
    ["/about" :about]
    ["/market-sum"
     ["" :market-sum]
     ["/:count" :market-sum]]]))

(defn path-for [route & [params]]
  (if params
    (:path (reitit/match-by-name router route params))
    (:path (reitit/match-by-name router route))))

;; -------------------------
;; Page components

(defn home-page []
  (fn []
    [:span.main
     [:h1 "Welcome to clj-trader"]
     [:ul
      [:li [:a {:href (path-for :items)} "Items of clj-trader"]]
      [:li [:a {:href "/broken/link"} "Broken link"]]
      [:li [:a {:href (path-for :market-sum)} "Market Summary"]]]]))



(defn items-page []
  (fn []
    [:span.main
     [:h1 "The items of clj-trader"]
     [:ul (map (fn [item-id]
                 [:li {:name (str "item-" item-id) :key (str "item-" item-id)}
                  [:a {:href (path-for :item {:item-id item-id})} "Item: " item-id]])
               (range 1 60))]]))


(defn item-page []
  (fn []
    (let [routing-data (session/get :route)
          item (get-in routing-data [:route-params :item-id])]
      [:span.main
       [:h1 (str "Item " item " of clj-trader")]
       [:p [:a {:href (path-for :items)} "Back to the list of items"]]])))


(defn about-page []
  (fn [] [:span.main
          [:h1 "About clj-trader"]]))

(defn market-sum-page []
  (fn [] [:span.main
          [:h1 "Market Summary"]
          [:div.chart-container
           [:div [:h4.chart-column "timestamp"] [:h4.chart-column "high"] [:h4.chart-column "low"]]
           (map (fn [instrument]
                  [:div [:p (:timestamp instrument)] [:p (:high instrument)] [:p (:low instrument)]])
                (client/get (path-for :instrument-sum {:count 50})))
            ]]))

(defn account-sum-page []
  (fn [] [:span.main
          [:h1 "Account Summary"]
          []]))

;; -------------------------
;; Translate routes -> page components

(defn page-for [route]
  (case route
    :index #'home-page
    :about #'about-page
    :items #'items-page
    :item #'item-page
    :market-sum #'market-sum-page))


;; -------------------------
;; Page mounting component

(defn current-page []
  (fn []
    (let [page (:current-page (session/get :route))]
      [:div
       [:header
        [:p
         [:a {:href (path-for :index)} "Home"] " | "
         [:a {:href (path-for :about)} "About clj-trader"]]]
       [page]
       [:footer
        [:p "clj-trader was generated by the "
         [:a {:href "https://github.com/reagent-project/reagent-template"} "Reagent Template"] "."]]])))

;; -------------------------
;; Initialize app

(defn mount-root []
  (rdom/render [current-page] (.getElementById js/document "app")))

(defn init! []
  (clerk/initialize!)
  (accountant/configure-navigation!
   {:nav-handler
    (fn [path]
      (let [match (reitit/match-by-path router path)
            current-page (:name (:data  match))
            route-params (:path-params match)]
        (reagent/after-render clerk/after-render!)
        (session/put! :route {:current-page (page-for current-page)
                              :route-params route-params})
        (clerk/navigate-page! path)
        ))
    :path-exists?
    (fn [path]
      (boolean (reitit/match-by-path router path)))})
  (accountant/dispatch-current!)
  (mount-root))
